!function(){var t,e;t=this,e=function(t,e){"use strict";const o=new e.Frustum,r=new e.Vector3,n=new e.Vector3,s=new e.Vector3,i=new e.Vector3,a=new e.Vector3,c=new e.Vector3,h=new e.Vector3,l=new e.Vector3,m=new e.Vector3,p=new e.Vector3,u=new e.Vector3,d=new e.Vector3,y=new e.Vector3,x=new e.Vector3,P=new e.Matrix4,f=new e.Quaternion,w=new e.Vector3;t.SelectionBox=class{constructor(t,o,r=Number.MAX_VALUE){this.camera=t,this.scene=o,this.startPoint=new e.Vector3,this.endPoint=new e.Vector3,this.collection=[],this.instances={},this.deep=r}select(t,e){return this.startPoint=t||this.startPoint,this.endPoint=e||this.endPoint,this.collection=[],this.updateFrustum(this.startPoint,this.endPoint),this.searchChildInFrustum(o,this.scene),this.collection}updateFrustum(t,e){if(t=t||this.startPoint,e=e||this.endPoint,t.x===e.x&&(e.x+=Number.EPSILON),t.y===e.y&&(e.y+=Number.EPSILON),this.camera.updateProjectionMatrix(),this.camera.updateMatrixWorld(),this.camera.isPerspectiveCamera){n.copy(t),n.x=Math.min(t.x,e.x),n.y=Math.max(t.y,e.y),e.x=Math.max(t.x,e.x),e.y=Math.min(t.y,e.y),s.setFromMatrixPosition(this.camera.matrixWorld),i.copy(n),a.set(e.x,n.y,0),c.copy(e),h.set(n.x,e.y,0),i.unproject(this.camera),a.unproject(this.camera),c.unproject(this.camera),h.unproject(this.camera),d.copy(i).sub(s),y.copy(a).sub(s),x.copy(c).sub(s),d.normalize(),y.normalize(),x.normalize(),d.multiplyScalar(this.deep),y.multiplyScalar(this.deep),x.multiplyScalar(this.deep),d.add(s),y.add(s),x.add(s);const r=o.planes;r[0].setFromCoplanarPoints(s,i,a),r[1].setFromCoplanarPoints(s,a,c),r[2].setFromCoplanarPoints(c,h,s),r[3].setFromCoplanarPoints(h,i,s),r[4].setFromCoplanarPoints(a,c,h),r[5].setFromCoplanarPoints(x,y,d),r[5].normal.multiplyScalar(-1)}else if(this.camera.isOrthographicCamera){const r=Math.min(t.x,e.x),n=Math.max(t.y,e.y),s=Math.max(t.x,e.x),d=Math.min(t.y,e.y);i.set(r,n,-1),a.set(s,n,-1),c.set(s,d,-1),h.set(r,d,-1),l.set(r,n,1),m.set(s,n,1),p.set(s,d,1),u.set(r,d,1),i.unproject(this.camera),a.unproject(this.camera),c.unproject(this.camera),h.unproject(this.camera),l.unproject(this.camera),m.unproject(this.camera),p.unproject(this.camera),u.unproject(this.camera);const y=o.planes;y[0].setFromCoplanarPoints(i,l,m),y[1].setFromCoplanarPoints(a,m,p),y[2].setFromCoplanarPoints(p,u,h),y[3].setFromCoplanarPoints(u,l,i),y[4].setFromCoplanarPoints(a,c,h),y[5].setFromCoplanarPoints(p,m,l),y[5].normal.multiplyScalar(-1)}else console.error("THREE.SelectionBox: Unsupported camera type.")}searchChildInFrustum(t,e){if(e.isMesh||e.isLine||e.isPoints)if(e.isInstancedMesh){this.instances[e.uuid]=[];for(let o=0;o<e.count;o++)e.getMatrixAt(o,P),P.decompose(r,f,w),r.applyMatrix4(e.matrixWorld),t.containsPoint(r)&&this.instances[e.uuid].push(o)}else null===e.geometry.boundingSphere&&e.geometry.computeBoundingSphere(),r.copy(e.geometry.boundingSphere.center),r.applyMatrix4(e.matrixWorld),t.containsPoint(r)&&this.collection.push(e);if(e.children.length>0)for(let o=0;o<e.children.length;o++)this.searchChildInFrustum(t,e.children[o])}},Object.defineProperty(t,"__esModule",{value:!0})},"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("three")):"function"==typeof define&&define.amd?define(["exports","three"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).THREE=t["THREE-STD"]||{},t.THREE)}();
