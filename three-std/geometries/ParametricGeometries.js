!function(){var t,s;t=this,s=function(t,s,e){"use strict";const o={klein:function(t,s,e){let o,n;s*=Math.PI,t*=2*Math.PI,(s*=2)<Math.PI?(o=3*Math.cos(s)*(1+Math.sin(s))+2*(1-Math.cos(s)/2)*Math.cos(s)*Math.cos(t),n=-8*Math.sin(s)-2*(1-Math.cos(s)/2)*Math.sin(s)*Math.cos(t)):(o=3*Math.cos(s)*(1+Math.sin(s))+2*(1-Math.cos(s)/2)*Math.cos(t+Math.PI),n=-8*Math.sin(s));const a=-2*(1-Math.cos(s)/2)*Math.sin(t);e.set(o,a,n)},plane:function(t,s){return function(e,o,n){const a=e*t,c=o*s;n.set(a,0,c)}},mobius:function(t,s,e){t-=.5;const o=2*Math.PI*s,n=Math.cos(o)*(2+t*Math.cos(o/2)),a=Math.sin(o)*(2+t*Math.cos(o/2)),c=t*Math.sin(o/2);e.set(n,a,c)},mobius3d:function(t,s,e){t*=Math.PI,s*=2*Math.PI;const o=(t*=2)/2;let n=.125*Math.cos(s)*Math.cos(o)-.65*Math.sin(s)*Math.sin(o);const a=.125*Math.cos(s)*Math.sin(o)+.65*Math.sin(s)*Math.cos(o),c=(2.25+n)*Math.sin(t);n=(2.25+n)*Math.cos(t),e.set(n,c,a)}};o.TubeGeometry=class extends e.ParametricGeometry{constructor(t,e=64,o=1,n=8,a=!1){const c=e+1,h=t.computeFrenetFrames(e,a),i=h.tangents,r=h.normals,M=h.binormals,u=new s.Vector3;super((function(s,e,n){e*=2*Math.PI;const a=Math.floor(s*(c-1));t.getPointAt(s,u);const h=r[a],i=M[a],m=-o*Math.cos(e),l=o*Math.sin(e);u.x+=m*h.x+l*i.x,u.y+=m*h.y+l*i.y,u.z+=m*h.z+l*i.z,n.copy(u)}),e,n),this.tangents=i,this.normals=r,this.binormals=M,this.path=t,this.segments=e,this.radius=o,this.segmentsRadius=n,this.closed=a}},o.TorusKnotGeometry=class extends o.TubeGeometry{constructor(t=200,e=40,o=64,n=8,a=2,c=3){class h extends s.Curve{getPoint(e,o=new s.Vector3){const n=o;e*=2*Math.PI;const h=(1+.5*Math.cos(c*e))*Math.cos(a*e),i=(1+.5*Math.cos(c*e))*Math.sin(a*e),r=.5*Math.sin(c*e);return n.set(h,i,r).multiplyScalar(t)}}const i=o,r=n;super(new h,i,e,r,!0,!1),this.radius=t,this.tube=e,this.segmentsT=o,this.segmentsR=n,this.p=a,this.q=c}},o.SphereGeometry=class extends e.ParametricGeometry{constructor(t,s,e){super((function(s,e,o){s*=Math.PI,e*=2*Math.PI;const n=t*Math.sin(s)*Math.cos(e),a=t*Math.sin(s)*Math.sin(e),c=t*Math.cos(s);o.set(n,a,c)}),s,e)}},o.PlaneGeometry=class extends e.ParametricGeometry{constructor(t,s,e,o){super((function(e,o,n){const a=e*t,c=o*s;n.set(a,0,c)}),e,o)}},t.ParametricGeometries=o,Object.defineProperty(t,"__esModule",{value:!0})},"object"==typeof exports&&"undefined"!=typeof module?s(exports,require("three"),require("./ParametricGeometry.js")):"function"==typeof define&&define.amd?define(["exports","three","./ParametricGeometry"],s):s((t="undefined"!=typeof globalThis?globalThis:t||self).THREE=t["THREE-STD"]||{},t.THREE,t.THREE)}();
