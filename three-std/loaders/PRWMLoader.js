!function(){var e,t;e=this,t=function(e,t){"use strict";let r=null;function n(){if(null===r){const e=new ArrayBuffer(2),t=new Uint8Array(e),n=new Uint16Array(e);t[0]=170,t[1]=187,r=43707===n[0]}return r}const o=[null,Float32Array,null,Int8Array,Int16Array,null,Int32Array,Uint8Array,Uint16Array,null,Uint32Array],i={Uint16Array:"getUint16",Uint32Array:"getUint32",Int16Array:"getInt16",Int32Array:"getInt32",Float32Array:"getFloat32",Float64Array:"getFloat64"};function a(e,t,r,o,a){const s=t.BYTES_PER_ELEMENT;let l;if(a===n()||1===s)l=new t(e,r,o);else{const n=new DataView(e,r,o*s),u=i[t.name],f=!a;l=new t(o);for(let e=0;e<o;e++)l[e]=n[u](e*s,f)}return l}class s extends t.Loader{constructor(e){super(e)}load(e,r,o,i){const a=this,s=new t.FileLoader(a.manager);s.setPath(a.path),s.setResponseType("arraybuffer"),s.setRequestHeader(a.requestHeader),s.setWithCredentials(a.withCredentials),e=e.replace(/\*/g,n()?"be":"le"),s.load(e,(function(t){try{r(a.parse(t))}catch(t){i?i(t):console.error(t),a.manager.itemError(e)}}),o,i)}parse(e){const r=function(e){const t=new Uint8Array(e),r=t[0];let n=t[1];const i=!!(n>>7&1),s=n>>6&1,l=1==(n>>5&1),u=31&n;let f=0,d=0;if(l?(f=(t[2]<<16)+(t[3]<<8)+t[4],d=(t[5]<<16)+(t[6]<<8)+t[7]):(f=t[2]+(t[3]<<8)+(t[4]<<16),d=t[5]+(t[6]<<8)+(t[7]<<16)),0===r)throw new Error("PRWM decoder: Invalid format version: 0");if(1!==r)throw new Error("PRWM decoder: Unsupported format version: "+r);if(!i){if(0!==s)throw new Error("PRWM decoder: Indices type must be set to 0 for non-indexed geometries");if(0!==d)throw new Error("PRWM decoder: Number of indices must be set to 0 for non-indexed geometries")}let c=8;const y={};for(let r=0;r<u;r++){let r="";for(;c<t.length;){const e=t[c];if(c++,0===e)break;r+=String.fromCharCode(e)}n=t[c];const i=n>>7&1,s=1+(n>>4&3),u=o[15&n];c++,c=4*Math.ceil(c/4);const d=a(e,u,c,s*f,l);c+=u.BYTES_PER_ELEMENT*s*f,y[r]={type:i,cardinality:s,values:d}}c=4*Math.ceil(c/4);let A=null;return i&&(A=a(e,1===s?Uint32Array:Uint16Array,c,d,l)),{version:r,attributes:y,indices:A}}(e),n=Object.keys(r.attributes),i=new t.BufferGeometry;for(let e=0;e<n.length;e++){const o=r.attributes[n[e]];i.setAttribute(n[e],new t.BufferAttribute(o.values,o.cardinality,o.normalized))}return null!==r.indices&&i.setIndex(new t.BufferAttribute(r.indices,1)),i}static isBigEndianPlatform(){return n()}}e.PRWMLoader=s,Object.defineProperty(e,"__esModule",{value:!0})},"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("three")):"function"==typeof define&&define.amd?define(["exports","three"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).THREE=e["THREE-STD"]||{},e.THREE)}();
