!function(){var e,t;e=this,t=function(e,t,s,r){"use strict";class a extends s.Pass{constructor(e,a,i,l){super(),this.scene=e,this.camera=a,this.sampleLevel=4,this.unbiased=!0,this.clearColor=void 0!==i?i:0,this.clearAlpha=void 0!==l?l:0,this._oldClearColor=new t.Color,void 0===r.CopyShader&&console.error("THREE.SSAARenderPass relies on CopyShader");const h=r.CopyShader;this.copyUniforms=t.UniformsUtils.clone(h.uniforms),this.copyMaterial=new t.ShaderMaterial({uniforms:this.copyUniforms,vertexShader:h.vertexShader,fragmentShader:h.fragmentShader,premultipliedAlpha:!0,transparent:!0,blending:t.AdditiveBlending,depthTest:!1,depthWrite:!1}),this.fsQuad=new s.FullScreenQuad(this.copyMaterial)}dispose(){this.sampleRenderTarget&&(this.sampleRenderTarget.dispose(),this.sampleRenderTarget=null)}setSize(e,t){this.sampleRenderTarget&&this.sampleRenderTarget.setSize(e,t)}render(e,s,r){this.sampleRenderTarget||(this.sampleRenderTarget=new t.WebGLRenderTarget(r.width,r.height,{minFilter:t.LinearFilter,magFilter:t.LinearFilter,format:t.RGBAFormat}),this.sampleRenderTarget.texture.name="SSAARenderPass.sample");const a=i[Math.max(0,Math.min(this.sampleLevel,5))],l=e.autoClear;e.autoClear=!1,e.getClearColor(this._oldClearColor);const h=e.getClearAlpha(),o=1/a.length;this.copyUniforms.tDiffuse.value=this.sampleRenderTarget.texture;const n={fullWidth:r.width,fullHeight:r.height,offsetX:0,offsetY:0,width:r.width,height:r.height},d=Object.assign({},this.camera.view);d.enabled&&Object.assign(n,d);for(let t=0;t<a.length;t++){const r=a[t];this.camera.setViewOffset&&this.camera.setViewOffset(n.fullWidth,n.fullHeight,n.offsetX+.0625*r[0],n.offsetY+.0625*r[1],n.width,n.height);let i=o;this.unbiased&&(i+=.03125*((t+.5)/a.length-.5)),this.copyUniforms.opacity.value=i,e.setClearColor(this.clearColor,this.clearAlpha),e.setRenderTarget(this.sampleRenderTarget),e.clear(),e.render(this.scene,this.camera),e.setRenderTarget(this.renderToScreen?null:s),0===t&&(e.setClearColor(0,0),e.clear()),this.fsQuad.render(e)}this.camera.setViewOffset&&d.enabled?this.camera.setViewOffset(d.fullWidth,d.fullHeight,d.offsetX,d.offsetY,d.width,d.height):this.camera.clearViewOffset&&this.camera.clearViewOffset(),e.autoClear=l,e.setClearColor(this._oldClearColor,h)}}const i=[[[0,0]],[[4,4],[-4,-4]],[[-2,-6],[6,-2],[-6,2],[2,6]],[[1,-3],[-1,3],[5,1],[-3,-5],[-5,5],[-7,-1],[3,7],[7,-7]],[[1,1],[-1,-3],[-3,2],[4,-1],[-5,-2],[2,5],[5,3],[3,-5],[-2,6],[0,-7],[-4,-6],[-6,4],[-8,0],[7,-4],[6,7],[-7,-8]],[[-4,-7],[-7,-5],[-3,-5],[-5,-4],[-1,-4],[-2,-2],[-6,-1],[-4,0],[-7,1],[-1,2],[-6,3],[-3,3],[-7,6],[-3,6],[-5,7],[-1,7],[5,-7],[1,-6],[6,-5],[4,-4],[2,-3],[7,-2],[1,-1],[4,-1],[2,1],[6,2],[0,4],[4,4],[2,5],[7,5],[5,6],[3,7]]];e.SSAARenderPass=a,Object.defineProperty(e,"__esModule",{value:!0})},"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("three"),require("./Pass.js"),require("../shaders/CopyShader.js")):"function"==typeof define&&define.amd?define(["exports","three","./Pass","../shaders/CopyShader"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).THREE=e["THREE-STD"]||{},e.THREE,e.THREE,e.THREE)}();
