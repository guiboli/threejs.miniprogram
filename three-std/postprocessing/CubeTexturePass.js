!function(){var e,t;e=this,t=function(e,t,r){"use strict";class a extends r.Pass{constructor(e,r,a=1){super(),this.camera=e,this.needsSwap=!1,this.cubeShader=t.ShaderLib.cube,this.cubeMesh=new t.Mesh(new t.BoxGeometry(10,10,10),new t.ShaderMaterial({uniforms:t.UniformsUtils.clone(this.cubeShader.uniforms),vertexShader:this.cubeShader.vertexShader,fragmentShader:this.cubeShader.fragmentShader,depthTest:!1,depthWrite:!1,side:t.BackSide})),Object.defineProperty(this.cubeMesh.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),this.envMap=r,this.opacity=a,this.cubeScene=new t.Scene,this.cubeCamera=new t.PerspectiveCamera,this.cubeScene.add(this.cubeMesh)}render(e,t,r){const a=e.autoClear;e.autoClear=!1,this.cubeCamera.projectionMatrix.copy(this.camera.projectionMatrix),this.cubeCamera.quaternion.setFromRotationMatrix(this.camera.matrixWorld),this.cubeMesh.material.uniforms.envMap.value=this.envMap,this.cubeMesh.material.uniforms.flipEnvMap.value=this.envMap.isCubeTexture&&!1===this.envMap.isRenderTargetTexture?-1:1,this.cubeMesh.material.uniforms.opacity.value=this.opacity,this.cubeMesh.material.transparent=this.opacity<1,e.setRenderTarget(this.renderToScreen?null:r),this.clear&&e.clear(),e.render(this.cubeScene,this.cubeCamera),e.autoClear=a}}e.CubeTexturePass=a,Object.defineProperty(e,"__esModule",{value:!0})},"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("three"),require("./Pass.js")):"function"==typeof define&&define.amd?define(["exports","three","./Pass"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).THREE=e["THREE-STD"]||{},e.THREE,e.THREE)}();
