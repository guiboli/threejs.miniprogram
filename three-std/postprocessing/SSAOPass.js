!function(){var e,r;e=this,r=function(e,r,t,a,i,s){"use strict";class n extends t.Pass{constructor(e,a,n,l){super(),this.width=void 0!==n?n:512,this.height=void 0!==l?l:512,this.clear=!0,this.camera=a,this.scene=e,this.kernelRadius=8,this.kernelSize=32,this.kernel=[],this.noiseTexture=null,this.output=0,this.minDistance=.005,this.maxDistance=.1,this._visibilityCache=new Map,this.generateSampleKernel(),this.generateRandomKernelRotations();const o=new r.DepthTexture;o.format=r.DepthStencilFormat,o.type=r.UnsignedInt248Type,this.beautyRenderTarget=new r.WebGLRenderTarget(this.width,this.height),this.normalRenderTarget=new r.WebGLRenderTarget(this.width,this.height,{minFilter:r.NearestFilter,magFilter:r.NearestFilter,depthTexture:o}),this.ssaoRenderTarget=new r.WebGLRenderTarget(this.width,this.height),this.blurRenderTarget=this.ssaoRenderTarget.clone(),void 0===i.SSAOShader&&console.error("THREE.SSAOPass: The pass relies on SSAOShader."),this.ssaoMaterial=new r.ShaderMaterial({defines:Object.assign({},i.SSAOShader.defines),uniforms:r.UniformsUtils.clone(i.SSAOShader.uniforms),vertexShader:i.SSAOShader.vertexShader,fragmentShader:i.SSAOShader.fragmentShader,blending:r.NoBlending}),this.ssaoMaterial.uniforms.tDiffuse.value=this.beautyRenderTarget.texture,this.ssaoMaterial.uniforms.tNormal.value=this.normalRenderTarget.texture,this.ssaoMaterial.uniforms.tDepth.value=this.normalRenderTarget.depthTexture,this.ssaoMaterial.uniforms.tNoise.value=this.noiseTexture,this.ssaoMaterial.uniforms.kernel.value=this.kernel,this.ssaoMaterial.uniforms.cameraNear.value=this.camera.near,this.ssaoMaterial.uniforms.cameraFar.value=this.camera.far,this.ssaoMaterial.uniforms.resolution.value.set(this.width,this.height),this.ssaoMaterial.uniforms.cameraProjectionMatrix.value.copy(this.camera.projectionMatrix),this.ssaoMaterial.uniforms.cameraInverseProjectionMatrix.value.copy(this.camera.projectionMatrixInverse),this.normalMaterial=new r.MeshNormalMaterial,this.normalMaterial.blending=r.NoBlending,this.blurMaterial=new r.ShaderMaterial({defines:Object.assign({},i.SSAOBlurShader.defines),uniforms:r.UniformsUtils.clone(i.SSAOBlurShader.uniforms),vertexShader:i.SSAOBlurShader.vertexShader,fragmentShader:i.SSAOBlurShader.fragmentShader}),this.blurMaterial.uniforms.tDiffuse.value=this.ssaoRenderTarget.texture,this.blurMaterial.uniforms.resolution.value.set(this.width,this.height),this.depthRenderMaterial=new r.ShaderMaterial({defines:Object.assign({},i.SSAODepthShader.defines),uniforms:r.UniformsUtils.clone(i.SSAODepthShader.uniforms),vertexShader:i.SSAODepthShader.vertexShader,fragmentShader:i.SSAODepthShader.fragmentShader,blending:r.NoBlending}),this.depthRenderMaterial.uniforms.tDepth.value=this.normalRenderTarget.depthTexture,this.depthRenderMaterial.uniforms.cameraNear.value=this.camera.near,this.depthRenderMaterial.uniforms.cameraFar.value=this.camera.far,this.copyMaterial=new r.ShaderMaterial({uniforms:r.UniformsUtils.clone(s.CopyShader.uniforms),vertexShader:s.CopyShader.vertexShader,fragmentShader:s.CopyShader.fragmentShader,transparent:!0,depthTest:!1,depthWrite:!1,blendSrc:r.DstColorFactor,blendDst:r.ZeroFactor,blendEquation:r.AddEquation,blendSrcAlpha:r.DstAlphaFactor,blendDstAlpha:r.ZeroFactor,blendEquationAlpha:r.AddEquation}),this.fsQuad=new t.FullScreenQuad(null),this.originalClearColor=new r.Color}dispose(){this.beautyRenderTarget.dispose(),this.normalRenderTarget.dispose(),this.ssaoRenderTarget.dispose(),this.blurRenderTarget.dispose(),this.normalMaterial.dispose(),this.blurMaterial.dispose(),this.copyMaterial.dispose(),this.depthRenderMaterial.dispose(),this.fsQuad.dispose()}render(e,t){switch(!1===e.capabilities.isWebGL2&&(this.noiseTexture.format=r.LuminanceFormat),e.setRenderTarget(this.beautyRenderTarget),e.clear(),e.render(this.scene,this.camera),this.overrideVisibility(),this.renderOverride(e,this.normalMaterial,this.normalRenderTarget,7829503,1),this.restoreVisibility(),this.ssaoMaterial.uniforms.kernelRadius.value=this.kernelRadius,this.ssaoMaterial.uniforms.minDistance.value=this.minDistance,this.ssaoMaterial.uniforms.maxDistance.value=this.maxDistance,this.renderPass(e,this.ssaoMaterial,this.ssaoRenderTarget),this.renderPass(e,this.blurMaterial,this.blurRenderTarget),this.output){case n.OUTPUT.SSAO:this.copyMaterial.uniforms.tDiffuse.value=this.ssaoRenderTarget.texture,this.copyMaterial.blending=r.NoBlending,this.renderPass(e,this.copyMaterial,this.renderToScreen?null:t);break;case n.OUTPUT.Blur:this.copyMaterial.uniforms.tDiffuse.value=this.blurRenderTarget.texture,this.copyMaterial.blending=r.NoBlending,this.renderPass(e,this.copyMaterial,this.renderToScreen?null:t);break;case n.OUTPUT.Beauty:this.copyMaterial.uniforms.tDiffuse.value=this.beautyRenderTarget.texture,this.copyMaterial.blending=r.NoBlending,this.renderPass(e,this.copyMaterial,this.renderToScreen?null:t);break;case n.OUTPUT.Depth:this.renderPass(e,this.depthRenderMaterial,this.renderToScreen?null:t);break;case n.OUTPUT.Normal:this.copyMaterial.uniforms.tDiffuse.value=this.normalRenderTarget.texture,this.copyMaterial.blending=r.NoBlending,this.renderPass(e,this.copyMaterial,this.renderToScreen?null:t);break;case n.OUTPUT.Default:this.copyMaterial.uniforms.tDiffuse.value=this.beautyRenderTarget.texture,this.copyMaterial.blending=r.NoBlending,this.renderPass(e,this.copyMaterial,this.renderToScreen?null:t),this.copyMaterial.uniforms.tDiffuse.value=this.blurRenderTarget.texture,this.copyMaterial.blending=r.CustomBlending,this.renderPass(e,this.copyMaterial,this.renderToScreen?null:t);break;default:console.warn("THREE.SSAOPass: Unknown output type.")}}renderPass(e,r,t,a,i){e.getClearColor(this.originalClearColor);const s=e.getClearAlpha(),n=e.autoClear;e.setRenderTarget(t),e.autoClear=!1,null!=a&&(e.setClearColor(a),e.setClearAlpha(i||0),e.clear()),this.fsQuad.material=r,this.fsQuad.render(e),e.autoClear=n,e.setClearColor(this.originalClearColor),e.setClearAlpha(s)}renderOverride(e,r,t,a,i){e.getClearColor(this.originalClearColor);const s=e.getClearAlpha(),n=e.autoClear;e.setRenderTarget(t),e.autoClear=!1,a=r.clearColor||a,i=r.clearAlpha||i,null!=a&&(e.setClearColor(a),e.setClearAlpha(i||0),e.clear()),this.scene.overrideMaterial=r,e.render(this.scene,this.camera),this.scene.overrideMaterial=null,e.autoClear=n,e.setClearColor(this.originalClearColor),e.setClearAlpha(s)}setSize(e,r){this.width=e,this.height=r,this.beautyRenderTarget.setSize(e,r),this.ssaoRenderTarget.setSize(e,r),this.normalRenderTarget.setSize(e,r),this.blurRenderTarget.setSize(e,r),this.ssaoMaterial.uniforms.resolution.value.set(e,r),this.ssaoMaterial.uniforms.cameraProjectionMatrix.value.copy(this.camera.projectionMatrix),this.ssaoMaterial.uniforms.cameraInverseProjectionMatrix.value.copy(this.camera.projectionMatrixInverse),this.blurMaterial.uniforms.resolution.value.set(e,r)}generateSampleKernel(){const e=this.kernelSize,t=this.kernel;for(let a=0;a<e;a++){const i=new r.Vector3;i.x=2*Math.random()-1,i.y=2*Math.random()-1,i.z=Math.random(),i.normalize();let s=a/e;s=r.MathUtils.lerp(.1,1,s*s),i.multiplyScalar(s),t.push(i)}}generateRandomKernelRotations(){void 0===a.SimplexNoise&&console.error("THREE.SSAOPass: The pass relies on SimplexNoise.");const e=new a.SimplexNoise,t=new Float32Array(16);for(let r=0;r<16;r++){const a=2*Math.random()-1,i=2*Math.random()-1,s=0;t[r]=e.noise3d(a,i,s)}this.noiseTexture=new r.DataTexture(t,4,4,r.RedFormat,r.FloatType),this.noiseTexture.wrapS=r.RepeatWrapping,this.noiseTexture.wrapT=r.RepeatWrapping,this.noiseTexture.needsUpdate=!0}overrideVisibility(){const e=this.scene,r=this._visibilityCache;e.traverse((function(e){r.set(e,e.visible),(e.isPoints||e.isLine)&&(e.visible=!1)}))}restoreVisibility(){const e=this.scene,r=this._visibilityCache;e.traverse((function(e){const t=r.get(e);e.visible=t})),r.clear()}}n.OUTPUT={Default:0,SSAO:1,Blur:2,Beauty:3,Depth:4,Normal:5},e.SSAOPass=n,Object.defineProperty(e,"__esModule",{value:!0})},"object"==typeof exports&&"undefined"!=typeof module?r(exports,require("three"),require("./Pass.js"),require("../math/SimplexNoise.js"),require("../shaders/SSAOShader.js"),require("../shaders/CopyShader.js")):"function"==typeof define&&define.amd?define(["exports","three","./Pass","../math/SimplexNoise","../shaders/SSAOShader","../shaders/CopyShader"],r):r((e="undefined"!=typeof globalThis?globalThis:e||self).THREE=e["THREE-STD"]||{},e.THREE,e.THREE,e.THREE,e.THREE,e.THREE)}();
