!function(){var t,e;t=this,e=function(t,e){"use strict";class n extends e.MeshPhongMaterial{constructor(t){super(),this.defines={},this.type="PackedPhongMaterial",this.uniforms=e.UniformsUtils.merge([e.ShaderLib.phong.uniforms,{quantizeMatPos:{value:null},quantizeMatUV:{value:null}}]),this.vertexShader=["#define PHONG","varying vec3 vViewPosition;",e.ShaderChunk.common,e.ShaderChunk.uv_pars_vertex,e.ShaderChunk.uv2_pars_vertex,e.ShaderChunk.displacementmap_pars_vertex,e.ShaderChunk.envmap_pars_vertex,e.ShaderChunk.color_pars_vertex,e.ShaderChunk.fog_pars_vertex,e.ShaderChunk.normal_pars_vertex,e.ShaderChunk.morphtarget_pars_vertex,e.ShaderChunk.skinning_pars_vertex,e.ShaderChunk.shadowmap_pars_vertex,e.ShaderChunk.logdepthbuf_pars_vertex,e.ShaderChunk.clipping_planes_pars_vertex,"#ifdef USE_PACKED_NORMAL\n\t\t\t\t\t#if USE_PACKED_NORMAL == 0\n\t\t\t\t\t\tvec3 decodeNormal(vec3 packedNormal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfloat x = packedNormal.x * 2.0 - 1.0;\n\t\t\t\t\t\t\tfloat y = packedNormal.y * 2.0 - 1.0;\n\t\t\t\t\t\t\tvec2 scth = vec2(sin(x * PI), cos(x * PI));\n\t\t\t\t\t\t\tvec2 scphi = vec2(sqrt(1.0 - y * y), y);\n\t\t\t\t\t\t\treturn normalize( vec3(scth.y * scphi.x, scth.x * scphi.x, scphi.y) );\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#if USE_PACKED_NORMAL == 1\n\t\t\t\t\t\tvec3 decodeNormal(vec3 packedNormal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvec3 v = vec3(packedNormal.xy, 1.0 - abs(packedNormal.x) - abs(packedNormal.y));\n\t\t\t\t\t\t\tif (v.z < 0.0)\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tv.xy = (1.0 - abs(v.yx)) * vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn normalize(v);\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#if USE_PACKED_NORMAL == 2\n\t\t\t\t\t\tvec3 decodeNormal(vec3 packedNormal)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvec3 v = (packedNormal * 2.0) - 1.0;\n\t\t\t\t\t\t\treturn normalize(v);\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\t\t\t\t#endif","#ifdef USE_PACKED_POSITION\n\t\t\t\t\t#if USE_PACKED_POSITION == 0\n\t\t\t\t\t\tuniform mat4 quantizeMatPos;\n\t\t\t\t\t#endif\n\t\t\t\t#endif","#ifdef USE_PACKED_UV\n\t\t\t\t\t#if USE_PACKED_UV == 1\n\t\t\t\t\t\tuniform mat3 quantizeMatUV;\n\t\t\t\t\t#endif\n\t\t\t\t#endif","#ifdef USE_PACKED_UV\n\t\t\t\t\t#if USE_PACKED_UV == 0\n\t\t\t\t\t\tvec2 decodeUV(vec2 packedUV)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvec2 uv = (packedUV * 2.0) - 1.0;\n\t\t\t\t\t\t\treturn uv;\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\n\t\t\t\t\t#if USE_PACKED_UV == 1\n\t\t\t\t\t\tvec2 decodeUV(vec2 packedUV)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvec2 uv = ( vec3(packedUV, 1.0) * quantizeMatUV ).xy;\n\t\t\t\t\t\t\treturn uv;\n\t\t\t\t\t\t}\n\t\t\t\t\t#endif\n\t\t\t\t#endif","void main() {",e.ShaderChunk.uv_vertex,"#ifdef USE_UV\n\t\t\t\t\t#ifdef USE_PACKED_UV\n\t\t\t\t\t\tvUv = decodeUV(vUv);\n\t\t\t\t\t#endif\n\t\t\t\t#endif",e.ShaderChunk.uv2_vertex,e.ShaderChunk.color_vertex,e.ShaderChunk.beginnormal_vertex,"#ifdef USE_PACKED_NORMAL\n\t\t\t\t\tobjectNormal = decodeNormal(objectNormal);\n\t\t\t\t#endif\n\n\t\t\t\t#ifdef USE_TANGENT\n\t\t\t\t\tvec3 objectTangent = vec3( tangent.xyz );\n\t\t\t\t#endif\n\t\t\t\t",e.ShaderChunk.morphnormal_vertex,e.ShaderChunk.skinbase_vertex,e.ShaderChunk.skinnormal_vertex,e.ShaderChunk.defaultnormal_vertex,e.ShaderChunk.normal_vertex,e.ShaderChunk.begin_vertex,"#ifdef USE_PACKED_POSITION\n\t\t\t\t\t#if USE_PACKED_POSITION == 0\n\t\t\t\t\t\ttransformed = ( vec4(transformed, 1.0) * quantizeMatPos ).xyz;\n\t\t\t\t\t#endif\n\t\t\t\t#endif",e.ShaderChunk.morphtarget_vertex,e.ShaderChunk.skinning_vertex,e.ShaderChunk.displacementmap_vertex,e.ShaderChunk.project_vertex,e.ShaderChunk.logdepthbuf_vertex,e.ShaderChunk.clipping_planes_vertex,"vViewPosition = - mvPosition.xyz;",e.ShaderChunk.worldpos_vertex,e.ShaderChunk.envmap_vertex,e.ShaderChunk.shadowmap_vertex,e.ShaderChunk.fog_vertex,"}"].join("\n"),this.fragmentShader=["#define PHONG","uniform vec3 diffuse;","uniform vec3 emissive;","uniform vec3 specular;","uniform float shininess;","uniform float opacity;",e.ShaderChunk.common,e.ShaderChunk.packing,e.ShaderChunk.dithering_pars_fragment,e.ShaderChunk.color_pars_fragment,e.ShaderChunk.uv_pars_fragment,e.ShaderChunk.uv2_pars_fragment,e.ShaderChunk.map_pars_fragment,e.ShaderChunk.alphamap_pars_fragment,e.ShaderChunk.aomap_pars_fragment,e.ShaderChunk.lightmap_pars_fragment,e.ShaderChunk.emissivemap_pars_fragment,e.ShaderChunk.envmap_common_pars_fragment,e.ShaderChunk.envmap_pars_fragment,e.ShaderChunk.cube_uv_reflection_fragment,e.ShaderChunk.fog_pars_fragment,e.ShaderChunk.bsdfs,e.ShaderChunk.lights_pars_begin,e.ShaderChunk.normal_pars_fragment,e.ShaderChunk.lights_phong_pars_fragment,e.ShaderChunk.shadowmap_pars_fragment,e.ShaderChunk.bumpmap_pars_fragment,e.ShaderChunk.normalmap_pars_fragment,e.ShaderChunk.specularmap_pars_fragment,e.ShaderChunk.logdepthbuf_pars_fragment,e.ShaderChunk.clipping_planes_pars_fragment,"void main() {",e.ShaderChunk.clipping_planes_fragment,"vec4 diffuseColor = vec4( diffuse, opacity );","ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );","vec3 totalEmissiveRadiance = emissive;",e.ShaderChunk.logdepthbuf_fragment,e.ShaderChunk.map_fragment,e.ShaderChunk.color_fragment,e.ShaderChunk.alphamap_fragment,e.ShaderChunk.alphatest_fragment,e.ShaderChunk.specularmap_fragment,e.ShaderChunk.normal_fragment_begin,e.ShaderChunk.normal_fragment_maps,e.ShaderChunk.emissivemap_fragment,e.ShaderChunk.lights_phong_fragment,e.ShaderChunk.lights_fragment_begin,e.ShaderChunk.lights_fragment_maps,e.ShaderChunk.lights_fragment_end,e.ShaderChunk.aomap_fragment,"vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;",e.ShaderChunk.envmap_fragment,"gl_FragColor = vec4( outgoingLight, diffuseColor.a );",e.ShaderChunk.tonemapping_fragment,e.ShaderChunk.encodings_fragment,e.ShaderChunk.fog_fragment,e.ShaderChunk.premultiplied_alpha_fragment,e.ShaderChunk.dithering_fragment,"}"].join("\n"),this.setValues(t)}}t.PackedPhongMaterial=n,Object.defineProperty(t,"__esModule",{value:!0})},"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("three")):"function"==typeof define&&define.amd?define(["exports","three"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).THREE=t["THREE-STD"]||{},t.THREE)}();
