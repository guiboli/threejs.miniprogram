!function(){var t,e;t=this,e=function(t,e){"use strict";const r=new e.Triangle,i=new e.Vector3;t.MeshSurfaceSampler=class{constructor(t){let e=t.geometry;if(!e.isBufferGeometry||3!==e.attributes.position.itemSize)throw new Error("THREE.MeshSurfaceSampler: Requires BufferGeometry triangle mesh.");e.index&&(console.warn("THREE.MeshSurfaceSampler: Converting geometry to non-indexed BufferGeometry."),e=e.toNonIndexed()),this.geometry=e,this.randomFunction=Math.random,this.positionAttribute=this.geometry.getAttribute("position"),this.colorAttribute=this.geometry.getAttribute("color"),this.weightAttribute=null,this.distribution=null}setWeightAttribute(t){return this.weightAttribute=t?this.geometry.getAttribute(t):null,this}build(){const t=this.positionAttribute,e=this.weightAttribute,i=new Float32Array(t.count/3);for(let o=0;o<t.count;o+=3){let n=1;e&&(n=e.getX(o)+e.getX(o+1)+e.getX(o+2)),r.a.fromBufferAttribute(t,o),r.b.fromBufferAttribute(t,o+1),r.c.fromBufferAttribute(t,o+2),n*=r.getArea(),i[o/3]=n}this.distribution=new Float32Array(t.count/3);let o=0;for(let t=0;t<i.length;t++)o+=i[t],this.distribution[t]=o;return this}setRandomGenerator(t){return this.randomFunction=t,this}sample(t,e,r){const i=this.distribution[this.distribution.length-1],o=this.binarySearch(this.randomFunction()*i);return this.sampleFace(o,t,e,r)}binarySearch(t){const e=this.distribution;let r=0,i=e.length-1,o=-1;for(;r<=i;){const n=Math.ceil((r+i)/2);if(0===n||e[n-1]<=t&&e[n]>t){o=n;break}t<e[n]?i=n-1:r=n+1}return o}sampleFace(t,e,o,n){let s=this.randomFunction(),u=this.randomFunction();return s+u>1&&(s=1-s,u=1-u),r.a.fromBufferAttribute(this.positionAttribute,3*t),r.b.fromBufferAttribute(this.positionAttribute,3*t+1),r.c.fromBufferAttribute(this.positionAttribute,3*t+2),e.set(0,0,0).addScaledVector(r.a,s).addScaledVector(r.b,u).addScaledVector(r.c,1-(s+u)),void 0!==o&&r.getNormal(o),void 0!==n&&void 0!==this.colorAttribute&&(r.a.fromBufferAttribute(this.colorAttribute,3*t),r.b.fromBufferAttribute(this.colorAttribute,3*t+1),r.c.fromBufferAttribute(this.colorAttribute,3*t+2),i.set(0,0,0).addScaledVector(r.a,s).addScaledVector(r.b,u).addScaledVector(r.c,1-(s+u)),n.r=i.x,n.g=i.y,n.b=i.z),this}},Object.defineProperty(t,"__esModule",{value:!0})},"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("three")):"function"==typeof define&&define.amd?define(["exports","three"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).THREE=t["THREE-STD"]||{},t.THREE)}();
