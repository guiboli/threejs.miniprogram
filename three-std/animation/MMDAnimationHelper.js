!function(){var e,t;e=this,t=function(e,t,s,i){"use strict";const n=[];let a=0;const r=new Map;function o(e,s,i,h){const l=e.skeleton.bones,u=e.geometry.userData.MMD.bones[s],c=l[s];if(r.has(s))return;const d=(a>=n.length&&n.push(new t.Quaternion),n[a++]);if(r.set(s,d.copy(c.quaternion)),h&&u.grant&&!u.grant.isLocal&&u.grant.affectRotation){const t=u.grant.parentIndex,s=u.grant.ratio;r.has(t)||o(e,t,i,h),h.addGrantRotation(c,r.get(t),s)}if(i&&u.ik){e.updateMatrixWorld(!0),i.updateOne(u.ik);const t=u.ik.links;for(let e=0,s=t.length;e<s;e++){const s=t[e];if(!1===s.enabled)continue;const i=s.index;r.has(i)&&r.set(i,r.get(i).copy(l[i].quaternion))}}d.copy(c.quaternion)}class h{constructor(e,t={}){this.audio=e,this.elapsedTime=0,this.currentTime=0,this.delayTime=void 0!==t.delayTime?t.delayTime:0,this.audioDuration=this.audio.buffer.duration,this.duration=this.audioDuration+this.delayTime}control(e){return this.elapsed+=e,this.currentTime+=e,this._shouldStopAudio()&&this.audio.stop(),this._shouldStartAudio()&&this.audio.play(),this}_shouldStartAudio(){if(this.audio.isPlaying)return!1;for(;this.currentTime>=this.duration;)this.currentTime-=this.duration;return!(this.currentTime<this.delayTime||this.currentTime-this.delayTime>this.audioDuration)}_shouldStopAudio(){return this.audio.isPlaying&&this.currentTime>=this.duration}}const l=new t.Quaternion;class u{constructor(e,t=[]){this.mesh=e,this.grants=t}update(){const e=this.grants;for(let t=0,s=e.length;t<s;t++)this.updateOne(e[t]);return this}updateOne(e){const t=this.mesh.skeleton.bones,s=t[e.index],i=t[e.parentIndex];return e.isLocal?(e.affectPosition,e.affectRotation):(e.affectPosition,e.affectRotation&&this.addGrantRotation(s,i.quaternion,e.ratio)),this}addGrantRotation(e,t,s){return l.set(0,0,0,1),l.slerp(t,s),e.quaternion.multiply(l),this}}e.MMDAnimationHelper=class{constructor(e={}){this.meshes=[],this.camera=null,this.cameraTarget=new t.Object3D,this.cameraTarget.name="target",this.audio=null,this.audioManager=null,this.objects=new WeakMap,this.configuration={sync:void 0===e.sync||e.sync,afterglow:void 0!==e.afterglow?e.afterglow:0,resetPhysicsOnLoop:void 0===e.resetPhysicsOnLoop||e.resetPhysicsOnLoop,pmxAnimation:void 0!==e.pmxAnimation&&e.pmxAnimation},this.enabled={animation:!0,ik:!0,grant:!0,physics:!0,cameraAnimation:!0},this.onBeforePhysics=function(){},this.sharedPhysics=!1,this.masterPhysics=null}add(e,t={}){if(e.isSkinnedMesh)this._addMesh(e,t);else if(e.isCamera)this._setupCamera(e,t);else{if("Audio"!==e.type)throw new Error("THREE.MMDAnimationHelper.add: accepts only THREE.SkinnedMesh or THREE.Camera or THREE.Audio instance.");this._setupAudio(e,t)}return this.configuration.sync&&this._syncDuration(),this}remove(e){if(e.isSkinnedMesh)this._removeMesh(e);else if(e.isCamera)this._clearCamera(e);else{if("Audio"!==e.type)throw new Error("THREE.MMDAnimationHelper.remove: accepts only THREE.SkinnedMesh or THREE.Camera or THREE.Audio instance.");this._clearAudio(e)}return this.configuration.sync&&this._syncDuration(),this}update(e){null!==this.audioManager&&this.audioManager.control(e);for(let t=0;t<this.meshes.length;t++)this._animateMesh(this.meshes[t],e);return this.sharedPhysics&&this._updateSharedPhysics(e),null!==this.camera&&this._animateCamera(this.camera,e),this}pose(e,s,i={}){!1!==i.resetPose&&e.pose();const n=e.skeleton.bones,a=s.bones,r={};for(let e=0,t=n.length;e<t;e++)r[n[e].name]=e;const o=new t.Vector3,h=new t.Quaternion;for(let e=0,t=a.length;e<t;e++){const t=a[e],s=r[t.name];if(void 0===s)continue;const i=n[s];i.position.add(o.fromArray(t.translation)),i.quaternion.multiply(h.fromArray(t.quaternion))}if(e.updateMatrixWorld(!0),this.configuration.pmxAnimation&&e.geometry.userData.MMD&&"pmx"===e.geometry.userData.MMD.format){const t=this._sortBoneDataArray(e.geometry.userData.MMD.bones.slice()),s=!1!==i.ik?this._createCCDIKSolver(e):null,n=!1!==i.grant?this.createGrantSolver(e):null;this._animatePMXMesh(e,t,s,n)}else!1!==i.ik&&this._createCCDIKSolver(e).update(),!1!==i.grant&&this.createGrantSolver(e).update();return this}enable(e,t){if(void 0===this.enabled[e])throw new Error("THREE.MMDAnimationHelper.enable: unknown key "+e);if(this.enabled[e]=t,"physics"===e)for(let e=0,s=this.meshes.length;e<s;e++)this._optimizeIK(this.meshes[e],t);return this}createGrantSolver(e){return new u(e,e.geometry.userData.MMD.grants)}_addMesh(e,t){if(this.meshes.indexOf(e)>=0)throw new Error("THREE.MMDAnimationHelper._addMesh: SkinnedMesh '"+e.name+"' has already been added.");return this.meshes.push(e),this.objects.set(e,{looped:!1}),this._setupMeshAnimation(e,t.animation),!1!==t.physics&&this._setupMeshPhysics(e,t),this}_setupCamera(e,t){if(this.camera===e)throw new Error("THREE.MMDAnimationHelper._setupCamera: Camera '"+e.name+"' has already been set.");return this.camera&&this.clearCamera(this.camera),this.camera=e,e.add(this.cameraTarget),this.objects.set(e,{}),void 0!==t.animation&&this._setupCameraAnimation(e,t.animation),this}_setupAudio(e,t){if(this.audio===e)throw new Error("THREE.MMDAnimationHelper._setupAudio: Audio '"+e.name+"' has already been set.");return this.audio&&this.clearAudio(this.audio),this.audio=e,this.audioManager=new h(e,t),this.objects.set(this.audioManager,{duration:this.audioManager.duration}),this}_removeMesh(e){let t=!1,s=0;for(let i=0,n=this.meshes.length;i<n;i++)this.meshes[i]!==e?this.meshes[s++]=this.meshes[i]:(this.objects.delete(e),t=!0);if(!t)throw new Error("THREE.MMDAnimationHelper._removeMesh: SkinnedMesh '"+e.name+"' has not been added yet.");return this.meshes.length=s,this}_clearCamera(e){if(e!==this.camera)throw new Error("THREE.MMDAnimationHelper._clearCamera: Camera '"+e.name+"' has not been set yet.");return this.camera.remove(this.cameraTarget),this.objects.delete(this.camera),this.camera=null,this}_clearAudio(e){if(e!==this.audio)throw new Error("THREE.MMDAnimationHelper._clearAudio: Audio '"+e.name+"' has not been set yet.");return this.objects.delete(this.audioManager),this.audio=null,this.audioManager=null,this}_setupMeshAnimation(e,s){const i=this.objects.get(e);if(void 0!==s){const n=Array.isArray(s)?s:[s];i.mixer=new t.AnimationMixer(e);for(let e=0,t=n.length;e<t;e++)i.mixer.clipAction(n[e]).play();i.mixer.addEventListener("loop",(function(e){const t=e.action._clip.tracks;t.length>0&&".bones"!==t[0].name.slice(0,6)||(i.looped=!0)}))}return i.ikSolver=this._createCCDIKSolver(e),i.grantSolver=this.createGrantSolver(e),this}_setupCameraAnimation(e,s){const i=Array.isArray(s)?s:[s],n=this.objects.get(e);n.mixer=new t.AnimationMixer(e);for(let e=0,t=i.length;e<t;e++)n.mixer.clipAction(i[e]).play()}_setupMeshPhysics(e,t){const s=this.objects.get(e);if(void 0===t.world&&this.sharedPhysics){const e=this._getMasterPhysics();null!==e&&(world=e.world)}s.physics=this._createMMDPhysics(e,t),s.mixer&&!1!==t.animationWarmup&&(this._animateMesh(e,0),s.physics.reset()),s.physics.warmup(void 0!==t.warmup?t.warmup:60),this._optimizeIK(e,!0)}_animateMesh(e,t){const s=this.objects.get(e),i=s.mixer,n=s.ikSolver,a=s.grantSolver,r=s.physics,o=s.looped;i&&this.enabled.animation&&(this._restoreBones(e),i.update(t),this._saveBones(e),this.configuration.pmxAnimation&&e.geometry.userData.MMD&&"pmx"===e.geometry.userData.MMD.format?(s.sortedBonesData||(s.sortedBonesData=this._sortBoneDataArray(e.geometry.userData.MMD.bones.slice())),this._animatePMXMesh(e,s.sortedBonesData,n&&this.enabled.ik?n:null,a&&this.enabled.grant?a:null)):(n&&this.enabled.ik&&(e.updateMatrixWorld(!0),n.update()),a&&this.enabled.grant&&a.update())),!0===o&&this.enabled.physics&&(r&&this.configuration.resetPhysicsOnLoop&&r.reset(),s.looped=!1),r&&this.enabled.physics&&!this.sharedPhysics&&(this.onBeforePhysics(e),r.update(t))}_sortBoneDataArray(e){return e.sort((function(e,t){return e.transformationClass!==t.transformationClass?e.transformationClass-t.transformationClass:e.index-t.index}))}_animatePMXMesh(e,t,s,i){a=0,r.clear();for(let n=0,a=t.length;n<a;n++)o(e,t[n].index,s,i);return e.updateMatrixWorld(!0),this}_animateCamera(e,t){const s=this.objects.get(e).mixer;s&&this.enabled.cameraAnimation&&(s.update(t),e.updateProjectionMatrix(),e.up.set(0,1,0),e.up.applyQuaternion(e.quaternion),e.lookAt(this.cameraTarget.position))}_optimizeIK(e,t){const s=e.geometry.userData.MMD.iks,i=e.geometry.userData.MMD.bones;for(let e=0,n=s.length;e<n;e++){const n=s[e].links;for(let e=0,s=n.length;e<s;e++){const s=n[e];s.enabled=!0!==t||!(i[s.index].rigidBodyType>0)}}}_createCCDIKSolver(e){if(void 0===s.CCDIKSolver)throw new Error("THREE.MMDAnimationHelper: Import CCDIKSolver.");return new s.CCDIKSolver(e,e.geometry.userData.MMD.iks)}_createMMDPhysics(e,t){if(void 0===i.MMDPhysics)throw new Error("THREE.MMDPhysics: Import MMDPhysics.");return new i.MMDPhysics(e,e.geometry.userData.MMD.rigidBodies,e.geometry.userData.MMD.constraints,t)}_syncDuration(){let e=0;const t=this.objects,s=this.meshes,i=this.camera,n=this.audioManager;for(let i=0,n=s.length;i<n;i++){const n=this.objects.get(s[i]).mixer;if(void 0!==n)for(let s=0;s<n._actions.length;s++){const i=n._actions[s]._clip;t.has(i)||t.set(i,{duration:i.duration}),e=Math.max(e,t.get(i).duration)}}if(null!==i){const s=this.objects.get(i).mixer;if(void 0!==s)for(let i=0,n=s._actions.length;i<n;i++){const n=s._actions[i]._clip;t.has(n)||t.set(n,{duration:n.duration}),e=Math.max(e,t.get(n).duration)}}null!==n&&(e=Math.max(e,t.get(n).duration)),e+=this.configuration.afterglow;for(let t=0,s=this.meshes.length;t<s;t++){const s=this.objects.get(this.meshes[t]).mixer;if(void 0!==s)for(let t=0,i=s._actions.length;t<i;t++)s._actions[t]._clip.duration=e}if(null!==i){const t=this.objects.get(i).mixer;if(void 0!==t)for(let s=0,i=t._actions.length;s<i;s++)t._actions[s]._clip.duration=e}null!==n&&(n.duration=e)}_updatePropertyMixersBuffer(e){const t=this.objects.get(e).mixer,s=t._bindings,i=t._accuIndex;for(let e=0,t=s.length;e<t;e++){const t=s[e],n=t.buffer,a=(i+1)*t.valueSize;t.binding.getValue(n,a)}}_saveBones(e){const t=this.objects.get(e),s=e.skeleton.bones;let i=t.backupBones;void 0===i&&(i=new Float32Array(7*s.length),t.backupBones=i);for(let e=0,t=s.length;e<t;e++){const t=s[e];t.position.toArray(i,7*e),t.quaternion.toArray(i,7*e+3)}}_restoreBones(e){const t=this.objects.get(e).backupBones;if(void 0===t)return;const s=e.skeleton.bones;for(let e=0,i=s.length;e<i;e++){const i=s[e];i.position.fromArray(t,7*e),i.quaternion.fromArray(t,7*e+3)}}_getMasterPhysics(){if(null!==this.masterPhysics)return this.masterPhysics;for(let e=0,t=this.meshes.length;e<t;e++){const t=this.meshes[e].physics;if(null!=t)return this.masterPhysics=t,this.masterPhysics}return null}_updateSharedPhysics(e){if(0===this.meshes.length||!this.enabled.physics||!this.sharedPhysics)return;const t=this._getMasterPhysics();if(null!==t){for(let e=0,t=this.meshes.length;e<t;e++){const t=this.meshes[e].physics;null!=t&&t.updateRigidBodies()}t.stepSimulation(e);for(let e=0,t=this.meshes.length;e<t;e++){const t=this.meshes[e].physics;null!=t&&t.updateBones()}}}},Object.defineProperty(e,"__esModule",{value:!0})},"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("three"),require("./CCDIKSolver.js"),require("./MMDPhysics.js")):"function"==typeof define&&define.amd?define(["exports","three","./CCDIKSolver","./MMDPhysics"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).THREE=e["THREE-STD"]||{},e.THREE,e.THREE,e.THREE)}();
